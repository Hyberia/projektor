#!/usr/bin/python
#
# Eiffel Forum License, version 2
#
# 1. Permission is hereby granted to use, copy, modify and/or
#    distribute this package, provided that:
#       * copyright notices are retained unchanged,
#       * any distribution of this package, whether modified or not,
#         includes this license text.
# 2. Permission is hereby also granted to distribute binary programs
#    which depend on this package. If the binary program depends on a
#    modified version of this package, you are encouraged to publicly
#    release the modified version of this package.
#
# THIS PACKAGE IS PROVIDED "AS IS" AND WITHOUT WARRANTY. ANY EXPRESS OR
# IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE AUTHORS BE LIABLE TO ANY PARTY FOR
# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES ARISING IN ANY WAY OUT OF THE USE OF THIS PACKAGE.

"""
Main script for the Touei project. Need the Touei modules.
"""

__author__ = "G-Anime"
__license__ = "Eiffel Version 2"
__version__ = "0.1"
__revision__ = ""
__contributors__= "Mathieu Charron, Martin Samson"

# Set this to your configuration file.
# default is /etc/touei.conf
CONFIG_FILE = "touei.conf"
# ALL OTHER CONFIGURATION ARE DONE IN THIS FILE.


###
# Do not change anything below this!
###

# Importation!
import logging
import logging.config
import ConfigParser
import time
import os
import sys
import touei
from touei import *


if __name__ == "__main__":
    # Create the configParser instance
    config = ConfigParser.SafeConfigParser(touei.CONFIG_DEFAULT_VALUE)
    #print config
    # Check if the config file exists:
    if os.path.exists(CONFIG_FILE):
        print "Loading config"
        config.read(CONFIG_FILE)
    else: print "Cannot load config"

    # Create Logger
    logger = logging.getLogger("touei")
    logger.setLevel(config.getint('logs', 'debug_level'))

    # Create file handler
    fh = logging.FileHandler(config.get('logs','main_log'))

    # Create the console logging
    ch = logging.StreamHandler()

    # Set formating
    formatter = logging.Formatter("%(asctime)s - %(name)s - %(levelname)s - %(message)s")
    cformatter = logging.Formatter("[%(levelname)s] %(name)s - %(message)s")
    ch.setFormatter(cformatter)
    fh.setFormatter(formatter)

    # Add the handler to logger
    logger.addHandler(ch)
    logger.addHandler(fh)

    # Do some sanity check before starting the system
    # Check: video, location
    if not os.path.isdir(config.get('video', 'location')):
        logger.warn("Can't open video location at %s" % (config.get('video', 'location'), ))
        exit(1)
    else:
        logger.debug("Video location %s is usable" % (config.get("video", "location"), ))
    # Check: video, intro
    if not os.path.exists(config.get('video', 'intro')):
        logger.critical("Can't open intro video at %s" % (config.get('video', 'intro'), ))
        exit(1)
    else:
        logger.debug("Intro video available at %s" % (config.get("video", "intro") , ))
    # Check: core, slave_socket
    if not os.path.exists(config.get("core", "slave_socket")):
        logger.warn("Can't open the slave socket at %s" % (config.get("core", "slave_socket"), ))
        # Create the socket
        os.mkfifo(config.get("core", "slave_socket"))
    else:
        logger.debug("FIFO file exist at %s" % (config.get("core", "slave_socket") ,))

    logger.info("Sanity check complete")

    # Create the Playlist instance
    playlist = playlist.PlayList()
    playlist.load(config.get("video", "location"))

    # Create the player instance
    player = player.PlayerInterface(config.get("core", "slave_socket"))

    # Call the daemon
    daemon = daemon.ToueiDaemon(playlist, player)
    # Enter the loop
    daemon.run()

    # We're done
    logger.info("Application run complete")
